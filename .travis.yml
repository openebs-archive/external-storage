language: go
dist: xenial
env:
- CHANGE_MINIKUBE_NONE_USER=true
git:
  depth: false
go:
  - 1.11.2
services: docker

install: true

before_script:
  # Download kubectl, which is a requirement for using minikube.
  - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.10.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
  # Download minikube.
  - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.28.2/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
  - sudo minikube start --vm-driver=none --bootstrapper=localkube --kubernetes-version=v1.10.0 --extra-config=apiserver.Authorization.Mode=RBAC --feature-gates=MountPropagation=false
   # Fix the kubectl context, as it's often stale.
  - minikube update-context
  # Wait for Kubernetes to be up and ready.
  - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
  # Download and initialize helm.
  #- ./openebs/ci/ubuntu-compile-nsenter.sh && sudo cp .tmp/util-linux-2.30.2/nsenter /usr/bin
  #- curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > get_helm.sh
  #- chmod 700 get_helm.sh
  #- ./get_helm.sh
  #- helm init

script:
  - ./openebs-build.sh
  # Verify that minkube is setup
  - kubectl cluster-info
  - kubectl get deployment
  - ./openebs-ci.sh

after_success:
  - git describe --tags --always
  - ./openebs-deploy.sh

branches:
  only:
  - release
  - /^\d+\.\d+(\.\d+)?(-\S*)?$/
  - /^v\d+\.\d+(\.\S*)?$/
